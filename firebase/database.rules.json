{
  "rules": {
    "users": {
      ".read": true,
      "$uid": {
        ".write": "newData.exists() && $uid === auth.uid",
        ".validate": "newData.hasChildren(['displayName', 'updatedAt'])",
        "displayName": {
          ".validate": "newData.val() === auth.token.name"
        },
        "photoURL": {
          ".validate": "newData.val().matches(/^https:\\/\\/[a-z0-9]+\\.googleusercontent\\.com\\/.*\\.jpg$/)"
        },
        "updatedAt": {
          ".validate": "newData.val() === now"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "usersPrivate": {
      "$uid": {
        ".write": "newData.exists() && $uid === auth.uid",
        ".read": "$uid === auth.uid",
        ".validate": "newData.hasChildren(['email'])",
        "email": {
          ".validate": "newData.val() === auth.token.email"
         }
      }
    },
    "journeys": {
      ".read": true,
      ".indexOn": ["updatedAt", "owner"],
      "$uid": {
        ".write": "auth !== null && (!data.exists() || data.child('owner').val() === auth.uid)",
        ".validate": "newData.hasChildren(['owner', 'title', 'updatedAt'])",
        "owner": {
          ".validate": "newData.val() === auth.uid && (!data.exists() || data.val() === auth.uid) && root.child('users/' + newData.val()).exists()"
        },
        "title": {
          ".validate": "newData.val().length > 0"
        },
        "coverURL": {
          ".validate": "newData.val().matches(/^https:\\/\\/firebasestorage.googleapis.com\\//)"
        },
        "updatedAt": {
          ".validate": "newData.val() === now"
        },
        "$other": {
          ".validate": false
        }
      }
    },
    "stories": {
      ".read": true,
      ".indexOn": ["journey"],
      "$uid": {
        ".write": "auth !== null && (!data.exists() || data.child('owner').val() === auth.uid)",
        ".validate": "newData.hasChildren(['journey', 'owner', 'updatedAt', 'title'])",
        "journey": {
          ".validate": "newData.val().matches(/^[a-zA-Z0-9_-]+$/) && root.child('journeys/' + newData.val() + '/owner').val() === auth.uid"
        },
        "owner": {
          ".validate": "newData.val() === auth.uid && (!data.exists() || data.val() === auth.uid) && root.child('users/' + newData.val()).exists()"
        },
        "dateStart": {
          ".validate": "newData.isNumber()"
        },
        "updatedAt": {
          ".validate": "newData.val() === now"
        },
        "title": {
          ".validate": "newData.val().length > 0"
        },
        "description": {
          ".validate": "newData.isString()"
        },
        "map": {
          ".validate": "newData.hasChildren(['lat', 'long'])",
          "lat": {
            ".validate": "newData.isNumber()"
          },
          "long": {
            ".validate": "newData.isNumber()"
          }
        },
        "coverURL": {
          ".validate": "newData.val().matches(/^https:\\/\\/firebasestorage.googleapis.com\\//)"
        },
        "photos": {
          "$photoUid": {
            ".validate": "newData.hasChildren(['url'])",
            "url": {
              ".validate": "newData.val().matches(/^https:\\/\\/firebasestorage.googleapis.com\\//)"
            },
            "title": {
              ".validate": "newData.isString()"
            }
          }
        },
        "videos": {
          "$videoUid": {
            ".validate": "newData.hasChildren(['id', 'type'])",
            "id": {
              ".validate": "newData.val().matches(/^[a-zA-Z0-9_-]{11}$/)"
            },
            "type": {
              ".validate": "newData.val() === 'youtube'"
            }
          }
        }
      }
    },
    "comments": {
      ".read": true,
      ".indexOn": ["story"],
      "$uid": {
        ".write": "(!data.exists() && newData.exists() && auth !== null) || (data.exists() && newData.exists() && auth !== null) || (data.exists() && !newData.exists() && (data.child('owner').val() === auth.uid || root.child('stories/' + data.child('story').val() + '/owner').val() === auth.uid))",
        ".validate": "newData.child('story').val().matches(/^[a-zA-Z0-9_-]+$/) && root.child('stories/' + newData.child('story').val()).exists() &&    newData.child('owner').val() === auth.uid && (!data.child('owner').exists() || data.child('owner').val() === auth.uid) && root.child('users/' + newData.child('owner').val()).exists() &&    newData.child('updatedAt').val() === now &&    newData.child('description').isString()",
        "story": {},
        "owner": {},
        "updatedAt": {},
        "description": {}
      }
    },
    "physicalWeb": {
      "$owner": {
        ".read": "$owner === auth.uid",
        ".write": "$owner === auth.uid",
        "$uid": {
          ".validate": "!data.exists() && newData.hasChildren(['url', 'createdAt', 'beacon'])",
          "url": {
            ".validate": "newData.isString()"
          },
          "shortUrl": {
            ".validate": "newData.isString()"
          },
          "title": {
            ".validate": "newData.isString()"
          },
          "description": {
            ".validate": "newData.isString()"
          },
          "createdAt": {
            ".validate": "newData.val() === now"
          },
          "beacon": {
            ".validate": "newData.hasChildren(['id'])",
            "id": {
              ".validate": "newData.isString()"
            },
            "name": {
              ".validate": "newData.isString()"
            }
          }
        }
      }
    }
  }
}